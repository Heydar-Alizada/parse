import os
import logging
from telegram import Update, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters
from dotenv import load_dotenv
from parser import parse_website
from datetime import datetime
import pytz
import json
import requests
from io import BytesIO

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# Get your bot token from environment variable
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Check if token is loaded
if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL
URLS_FILE = 'urls.json'

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
FILTERS_FILE = 'filters.json'

# –ó–Ω–∞—á–µ–Ω–∏—è URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_URLS = {
    'tap_az': "https://tap.az/elanlar/dasinmaz-emlak/menziller",
    'bina_az': "https://bina.az/baki/kiraye/menziller"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def trim_sent_ads(user_id: int) -> None:
    """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    user_data_dict = user_data[user_id]
    if 'sent_ads' in user_data_dict and len(user_data_dict['sent_ads']) > 100:
        print(f"–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —É–¥–∞–ª—è–µ–º {len(user_data_dict['sent_ads']) - 80} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–∞–ø–∏—Å–∏
        user_data_dict['sent_ads'] = user_data_dict['sent_ads'][-80:]
        print(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(user_data_dict['sent_ads'])} –∑–∞–ø–∏—Å–µ–π")

def get_user_data(user_id: int) -> dict:
    """Get user data from file"""
    if user_id not in user_data:
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            if os.path.exists('users.json'):
                with open('users.json', 'r', encoding='utf-8') as f:
                    all_users = json.load(f)
                    if str(user_id) in all_users:
                        user_data[user_id] = all_users[str(user_id)]
                        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        if 'sent_ads' in user_data[user_id] and len(user_data[user_id]['sent_ads']) > 10:
                            trim_sent_ads(user_id)
                            save_user_data(user_id)
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                        user_data[user_id] = {
                            'urls': DEFAULT_URLS.copy(),
                            'filters': {
                                'title': [],
                                'location': []
                            },
                            'sent_ads': [],
                            'auto_check': {
                                'enabled': False,
                                'interval': 300  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 5 –º–∏–Ω—É—Ç
                            }
                        }
                        print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                user_data[user_id] = {
                    'urls': DEFAULT_URLS.copy(),
                    'filters': {
                        'title': [],
                        'location': []
                    },
                    'sent_ads': [],
                    'auto_check': {
                        'enabled': False,
                        'interval': 300  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 5 –º–∏–Ω—É—Ç
                    }
                }
                print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            user_data[user_id] = {
                'urls': DEFAULT_URLS.copy(),
                'filters': {
                    'title': [],
                    'location': []
                },
                'sent_ads': [],
                'auto_check': {
                    'enabled': False,
                    'interval': 300  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 5 –º–∏–Ω—É—Ç
                }
            }
    return user_data[user_id]

def save_user_data(user_id: int):
    """Save user data to file"""
    try:
        print(f"== –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ==")
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ user_data
        if user_id not in user_data:
            print(f"ERROR: user_id {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_data!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –≤ user_data[user_id]
        if 'sent_ads' not in user_data[user_id]:
            print(f"ERROR: 'sent_ads' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_data[{user_id}]!")
            return
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ sent_ads –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        sent_ads = user_data[user_id]['sent_ads']
        print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º sent_ads, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(sent_ads)}")
        if sent_ads:
            print(f"–ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏: {sent_ads[:3]}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        all_users = {}
        if os.path.exists('users.json'):
            with open('users.json', 'r', encoding='utf-8') as f:
                all_users = json.load(f)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω users.json, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}")
        else:
            print("–§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_users[str(user_id)] = user_data[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ all_users
        if str(user_id) in all_users:
            if 'sent_ads' in all_users[str(user_id)]:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {len(all_users[str(user_id)]['sent_ads'])} –∑–∞–ø–∏—Å–µ–π –≤ all_users")
            else:
                print("ERROR: 'sent_ads' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ all_users –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        else:
            print(f"ERROR: {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ all_users –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(all_users, f, ensure_ascii=False, indent=2)
            print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ users.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        if os.path.exists('users.json'):
            with open('users.json', 'r', encoding='utf-8') as f:
                check_data = json.load(f)
                if str(user_id) in check_data:
                    if 'sent_ads' in check_data[str(user_id)]:
                        saved_count = len(check_data[str(user_id)]['sent_ads'])
                        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {saved_count} –∑–∞–ø–∏—Å–µ–π")
                        if saved_count != len(sent_ads):
                            print(f"–í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ ({len(sent_ads)}) –∏ –ø–æ—Å–ª–µ ({saved_count}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è!")
                    else:
                        print("ERROR: 'sent_ads' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
                else:
                    print(f"ERROR: {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        
        print(f"== –ó–ê–í–ï–†–®–ï–ù–û –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ==")
    except Exception as e:
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        import traceback
        traceback.print_exc()

def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    user_data['active_chat_id'] = update.effective_chat.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_buttons = [
        [
            InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data='menu_auto'),
            InlineKeyboardButton("‚èπ –°—Ç–æ–ø", callback_data='menu_stop')
        ],
        [
            InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä—ã", callback_data='menu_filter')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(menu_buttons)
    
    welcome_message = (
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ tap.az –∏ bina.az. üëã\n\n'
        
        'üìã *–ö–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n'
        
        '1Ô∏è‚É£ –ü–æ—Å–µ—Ç–∏—Ç–µ —Å–∞–π—Ç—ã [tap.az](https://tap.az/elanlar/dasinmaz-emlak/menziller) –∏ [bina.az](https://bina.az/baki/kiraye/menziller)\n\n'
        
        '2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ –ø–æ —Å–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (—Ü–µ–Ω–∞, —Ä–∞–π–æ–Ω, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ —Ç.–¥.)\n\n'
        
        '3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞\n\n'
        
        '4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π URL –≤ –±–æ—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:\n'
        '   /turl <—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Å tap.az>\n'
        '   /burl <—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Å bina.az>\n\n'
        
        '5Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n'
        '   /t - –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ tap.az\n'
        '   /b - –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ bina.az\n'
        '   /auto - –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n'
        
        '‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help'
    )
    
    update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup, disable_web_page_preview=True)

def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    help_message = (
        '*üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*\n\n'
        
        '*üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –¥–ª—è –ø–æ–∏—Å–∫–∞:*\n'
        '1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç—ã [tap.az](https://tap.az/elanlar/dasinmaz-emlak/menziller) –∏ [bina.az](https://bina.az/baki/kiraye/menziller)\n'
        '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω–∞, —Ä–∞–π–æ–Ω, –ø–ª–æ—â–∞–¥—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ —Ç.–¥.)\n'
        '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n'
        '4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /turl –∏ /burl –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ URL\n\n'
        
        '*üîç –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:*\n'
        '/t - –ø–æ–∏—Å–∫ –Ω–∞ tap.az –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É URL\n'
        '/b - –ø–æ–∏—Å–∫ –Ω–∞ bina.az –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É URL\n'
        '/parse <url> - –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É URL\n\n'
        
        '*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:*\n'
        '/auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n'
        '/auto <–≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏\n'
        '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n'
        
        '*üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:*\n'
        '/filter - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n'
        
        '*üìù –¢–µ–∫—É—â–∏–µ URL:*\n'
        f'tap.az:\n{get_user_data(update.effective_user.id)["urls"]["tap_az"]}\n\n'
        f'bina.az:\n{get_user_data(update.effective_user.id)["urls"]["bina_az"]}'
    )
    
    update.message.reply_text(help_message, parse_mode='Markdown', disable_web_page_preview=True)

def change_tap_url(update: Update, context: CallbackContext) -> None:
    """Change tap.az URL for searches."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if not context.args:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è tap.az.\n'
                                '–¢–µ–∫—É—â–∏–π URL:\n' + user_data['urls']['tap_az'])
        return
        
    new_url = context.args[0]
    if 'tap.az' not in new_url:
        update.message.reply_text('URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ tap.az!')
        return
        
    user_data['urls']['tap_az'] = new_url
    save_user_data(user_id)
    update.message.reply_text('URL –¥–ª—è tap.az —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')

def change_bina_url(update: Update, context: CallbackContext) -> None:
    """Change bina.az URL for searches."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if not context.args:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è bina.az.\n'
                                '–¢–µ–∫—É—â–∏–π URL:\n' + user_data['urls']['bina_az'])
        return
        
    new_url = context.args[0]
    if 'bina.az' not in new_url:
        update.message.reply_text('URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ bina.az!')
        return
        
    user_data['urls']['bina_az'] = new_url
    save_user_data(user_id)
    update.message.reply_text('URL –¥–ª—è bina.az —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')

def parse_command(update: Update, context: CallbackContext) -> None:
    """Parse website and send results."""
    if not context.args:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.')
        return
        
    user_id = update.effective_user.id
    url = context.args[0]
    send_parsing_results(update, context, url)

def quick_search(update: Update, context: CallbackContext) -> None:
    """Quick search for apartments on tap.az."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    send_parsing_results(update, context, user_data['urls']['tap_az'])

def bina_search(update: Update, context: CallbackContext) -> None:
    """Quick search for apartments on bina.az."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    send_parsing_results(update, context, user_data['urls']['bina_az'])

def auto_check(update: Update, context: CallbackContext) -> None:
    """Enable automatic checking."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    stop_auto_check(update, context)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    interval = 300  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
    if context.args and len(context.args) > 0:
        try:
            interval = int(context.args[0])
            if interval < 60:
                update.message.reply_text('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 60 —Å–µ–∫—É–Ω–¥!')
                interval = 60
        except ValueError:
            update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (5 –º–∏–Ω—É—Ç).')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–µ
    user_data['auto_check'] = {
        'enabled': True,
        'interval': interval,
        'active_chat_id': update.effective_chat.id
    }
    save_user_data(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    context.job_queue.run_repeating(
        auto_check_callback,
        interval=interval,
        first=10,
        context={'user_id': user_id},
        name=f'tap_az_check_{user_id}'
    )
    
    context.job_queue.run_repeating(
        auto_check_bina_callback,
        interval=interval,
        first=20,
        context={'user_id': user_id},
        name=f'bina_az_check_{user_id}'
    )
    
    update.message.reply_text(f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥)!')

def auto_check_callback(context: CallbackContext) -> None:
    """Callback for automatic checking tap.az."""
    user_id = context.job.context['user_id']
    user_data = get_user_data(user_id)
    
    if not user_data['active_chat_id']:
        print(f"ACTIVE_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
        
    print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ tap.az –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        results = parse_website(user_data['urls']['tap_az'], user_data['filters'])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(results) if results else 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å tap.az")
        if results and len(results) > 0:
            for result in results:
                try:
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç tap.az: {result}")
                    print(f"–°—Å—ã–ª–∫–∞: {result.get('link', '–ù–ï–¢ –°–°–´–õ–ö–ò')}")
                    print(f"–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è: {user_data['sent_ads'][:5] if user_data['sent_ads'] else '[]'}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if result.get('link') and result['link'] in user_data['sent_ads']:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ tap.az: {result['link']}")
                        continue
                    
                    message_sent = False
                    if result.get('photo_url'):
                        try:
                            response = requests.get(result['photo_url'])
                            photo = BytesIO(response.content)
                            photo.name = 'image.jpg'
                            
                            context.bot.send_photo(
                                chat_id=user_data['active_chat_id'],
                                photo=photo,
                                caption=result['message'],
                                parse_mode='HTML',
                                filename='image.jpg'
                            )
                            message_sent = True
                        except Exception as photo_error:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ tap.az: {str(photo_error)}")
                            context.bot.send_message(
                                chat_id=user_data['active_chat_id'],
                                text=result['message'],
                                parse_mode='HTML'
                            )
                            message_sent = True
                    else:
                        context.bot.send_message(
                            chat_id=user_data['active_chat_id'],
                            text=result['message'],
                            parse_mode='HTML'
                        )
                        message_sent = True
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if message_sent and result.get('link'):
                        print(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é tap.az: {result['link']}")
                        print(f"–ë—ã–ª –ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {result['link'] in user_data['sent_ads']}")
                        
                        if result['link'] not in user_data['sent_ads']:
                            user_data['sent_ads'].append(result['link'])
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∞—Å—å –ª–∏ —Å—Å—ã–ª–∫–∞
                            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {result['link'] in user_data['sent_ads']}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                            trim_sent_ads(user_id)
                            
                            try:
                                save_user_data(user_id)
                                print(f"–ò—Å—Ç–æ—Ä–∏—è tap.az –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(user_data['sent_ads'])}")
                            except Exception as save_error:
                                print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ tap.az: {str(save_error)}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è tap.az: {str(e)}")
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–µ tap.az: {str(e)}")
        context.bot.send_message(
            chat_id=user_data['active_chat_id'],
            text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ Tap.az: {str(e)}'
        )

def auto_check_bina_callback(context: CallbackContext) -> None:
    """Callback for automatic checking bina.az."""
    user_id = context.job.context['user_id']
    user_data = get_user_data(user_id)
    
    if not user_data['active_chat_id']:
        print(f"ACTIVE_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return
        
    print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ bina.az –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        results = parse_website(user_data['urls']['bina_az'], user_data['filters'])
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(results) if results else 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å bina.az")
        if results and len(results) > 0:
            for result in results:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if result.get('link') and result['link'] in user_data['sent_ads']:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ bina.az: {result['link']}")
                        continue
                    
                    message_sent = False
                    if result.get('photo_url'):
                        try:
                            response = requests.get(result['photo_url'])
                            photo = BytesIO(response.content)
                            photo.name = 'image.jpg'
                            
                            context.bot.send_photo(
                                chat_id=user_data['active_chat_id'],
                                photo=photo,
                                caption=result['message'],
                                parse_mode='HTML',
                                filename='image.jpg'
                            )
                            message_sent = True
                        except Exception as photo_error:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ bina.az: {str(photo_error)}")
                            context.bot.send_message(
                                chat_id=user_data['active_chat_id'],
                                text=result['message'],
                                parse_mode='HTML'
                            )
                            message_sent = True
                    else:
                        context.bot.send_message(
                            chat_id=user_data['active_chat_id'],
                            text=result['message'],
                            parse_mode='HTML'
                        )
                        message_sent = True
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if message_sent and result.get('link'):
                        print(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é bina.az: {result['link']}")
                        if result['link'] not in user_data['sent_ads']:
                            user_data['sent_ads'].append(result['link'])
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                            trim_sent_ads(user_id)
                            
                            save_user_data(user_id)
                            print(f"–ò—Å—Ç–æ—Ä–∏—è bina.az –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(user_data['sent_ads'])}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è bina.az: {str(e)}")
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–µ bina.az: {str(e)}")
        context.bot.send_message(
            chat_id=user_data['active_chat_id'],
            text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ Bina.az: {str(e)}'
        )

def send_parsing_results(update: Update, context: CallbackContext, url: str) -> None:
    """Send parsing results to the user."""
    user_id = update.effective_user.id
    user_data_dict = get_user_data(user_id)
    
    try:
        results = parse_website(url, user_data_dict['filters'])
        if not results:
            update.message.reply_text('–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
            return
            
        for result in results:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                if result.get('link') and result['link'] in user_data_dict['sent_ads']:
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {result['link']}")
                    continue
                    
                message_sent = False
                if result.get('photo_url'):
                    try:
                        response = requests.get(result['photo_url'])
                        photo = BytesIO(response.content)
                        photo.name = 'image.jpg'
                        
                        update.message.reply_photo(
                            photo=photo,
                            caption=result['message'],
                            parse_mode='HTML',
                            filename='image.jpg',
                            quote=False
                        )
                        message_sent = True
                    except Exception as photo_error:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(photo_error)}")
                        update.message.reply_text(
                            result['message'],
                            parse_mode='HTML'
                        )
                        message_sent = True
                else:
                    update.message.reply_text(
                        result['message'],
                        parse_mode='HTML'
                    )
                    message_sent = True
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                if message_sent and result.get('link'):
                    print(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é: {result['link']}")
                    if result['link'] not in user_data_dict['sent_ads']:
                        user_data_dict['sent_ads'].append(result['link'])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        trim_sent_ads(user_id)
                        
                        save_user_data(user_id)
                        print(f"–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(user_data_dict['sent_ads'])}")
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {str(e)}")
                continue
                
    except Exception as e:
        error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}'
        print(error_message)
        update.message.reply_text(error_message)

def stop_auto_check(update: Update, context: CallbackContext) -> None:
    """Stop automatic checking."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_jobs = context.job_queue.get_jobs_by_name(f'tap_az_check_{user_id}')
    for job in current_jobs:
        job.schedule_removal()
    
    current_jobs = context.job_queue.get_jobs_by_name(f'bina_az_check_{user_id}')
    for job in current_jobs:
        job.schedule_removal()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–µ
    if 'auto_check' in user_data:
        user_data['auto_check']['enabled'] = False
        save_user_data(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if update.message:
        update.message.reply_text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!')

def filter_command(update: Update, context: CallbackContext) -> None:
    """Show filter management menu with inline buttons."""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data='filter_add'),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", callback_data='filter_remove')
        ],
        [
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data='filter_clear')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    message = "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
    
    if user_data['filters']['location']:
        message += "–§–∏–ª—å—Ç—Ä—ã:\n"
        for f in user_data['filters']['location']:
            message += f"- {f}\n"
    else:
        message += "–§–∏–ª—å—Ç—Ä—ã: –Ω–µ—Ç\n"
        
    message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback query, –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_text
    if update.callback_query:
        update.callback_query.message.edit_text(message, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
        update.message.reply_text(message, reply_markup=reply_markup)

def filter_callback(update: Update, context: CallbackContext) -> None:
    """Handle filter button callbacks."""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    data = query.data.split('_')
    action = data[1]
    
    if action == 'clear':
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        user_data['filters'] = {'title': [], 'location': []}
        save_user_data(user_id)
        query.message.reply_text('–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É–¥–∞–ª–µ–Ω—ã!')
        filter_command(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        return
        
    if action == 'add':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("Xƒ±rdalan", callback_data='filter_city_Xƒ±rdalan'),
                InlineKeyboardButton("Masazƒ±r", callback_data='filter_city_Masazƒ±r')
            ],
            [
                InlineKeyboardButton("Sumqayƒ±t", callback_data='filter_city_Sumqayƒ±t'),
                InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='filter_city_other')
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='filter_back')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ "–î—Ä—É–≥–æ–µ" –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:',
            reply_markup=reply_markup
        )
        return
        
    if action == 'city':
        city = data[2]
        if city == 'other':
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            context.user_data['filter_action'] = 'add'
            query.message.reply_text(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞:\n'
                '(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)'
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
            if city not in user_data['filters']['title']:
                user_data['filters']['title'].append(city)
            if city not in user_data['filters']['location']:
                user_data['filters']['location'].append(city)
            save_user_data(user_id)
            query.message.reply_text(f'–§–∏–ª—å—Ç—Ä "{city}" –¥–æ–±–∞–≤–ª–µ–Ω!')
            filter_command(update, context)
        return
        
    if action == 'remove':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if not user_data['filters']['location']:
            query.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!')
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        keyboard = []
        for f in user_data['filters']['location']:
            keyboard.append([InlineKeyboardButton(f"‚ùå {f}", callback_data=f'filter_delete_{f}')])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='filter_back')])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
            reply_markup=reply_markup
        )
        return
        
    if action == 'delete':
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        filter_text = data[2]
        if filter_text in user_data['filters']['title']:
            user_data['filters']['title'].remove(filter_text)
        if filter_text in user_data['filters']['location']:
            user_data['filters']['location'].remove(filter_text)
        save_user_data(user_id)
        query.message.reply_text(f'–§–∏–ª—å—Ç—Ä "{filter_text}" —É–¥–∞–ª–µ–Ω!')
        filter_command(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        return
        
    if action == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_command(update, context)
        return

def handle_filter_text(update: Update, context: CallbackContext) -> None:
    """Handle filter text input."""
    if 'filter_action' not in context.user_data:
        return
        
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    action = context.user_data['filter_action']
    filter_text = update.message.text
    
    if action == 'add':
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ –≤ title, –∏ –≤ location
        if filter_text not in user_data['filters']['title']:
            user_data['filters']['title'].append(filter_text)
        if filter_text not in user_data['filters']['location']:
            user_data['filters']['location'].append(filter_text)
        save_user_data(user_id)
        update.message.reply_text(f'–§–∏–ª—å—Ç—Ä "{filter_text}" –¥–æ–±–∞–≤–ª–µ–Ω!')
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del context.user_data['filter_action']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    filter_command(update, context)

def cancel_filter(update: Update, context: CallbackContext) -> None:
    """Cancel filter operation."""
    if 'filter_action' in context.user_data:
        del context.user_data['filter_action']
        update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        filter_command(update, context)

def menu_callback(update: Update, context: CallbackContext) -> None:
    """Handle menu button callbacks."""
    query = update.callback_query
    query.answer()
    
    data = query.data.split('_')
    action = data[1]
    
    if action == 'auto':
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update —Å message
        temp_update = Update(update.update_id)
        temp_update.message = query.message
        auto_check(temp_update, context)
    elif action == 'stop':
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update —Å message
        temp_update = Update(update.update_id)
        temp_update.message = query.message
        stop_auto_check(temp_update, context)
    elif action == 'filter':
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Update —Å message
        temp_update = Update(update.update_id)
        temp_update.message = query.message
        filter_command(temp_update, context)

def restore_auto_checks(dispatcher) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫...")
    
    try:
        if os.path.exists('users.json'):
            with open('users.json', 'r', encoding='utf-8') as f:
                all_users = json.load(f)
                
                for user_id_str, user_data_dict in all_users.items():
                    try:
                        user_id = int(user_id_str)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞
                        if 'auto_check' in user_data_dict and user_data_dict['auto_check'].get('enabled', False):
                            interval = user_data_dict['auto_check'].get('interval', 300)
                            active_chat_id = user_data_dict['auto_check'].get('active_chat_id')
                            
                            if active_chat_id:
                                print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫.")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                                dispatcher.job_queue.run_repeating(
                                    auto_check_callback,
                                    interval=interval,
                                    first=10,
                                    context={'user_id': user_id},
                                    name=f'tap_az_check_{user_id}'
                                )
                                
                                dispatcher.job_queue.run_repeating(
                                    auto_check_bina_callback,
                                    interval=interval,
                                    first=20,
                                    context={'user_id': user_id},
                                    name=f'bina_az_check_{user_id}'
                                )
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
                                try:
                                    dispatcher.bot.send_message(
                                        chat_id=active_chat_id,
                                        text=f'–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥)!'
                                    )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {str(e)}")
                        
        print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–æ–∫: {str(e)}")

def main() -> None:
    """Start the bot."""
    try:
        # Create the Updater
        updater = Updater(TOKEN)

        # Get the dispatcher to register handlers
        dispatcher = updater.dispatcher

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
        commands = [
            ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
            ('filter', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏'),
            ('auto', '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É'),
            ('stop', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É'),
            ('help', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'),
            ('t', '–ü–æ–∏—Å–∫ –Ω–∞ tap.az'),
            ('b', '–ü–æ–∏—Å–∫ –Ω–∞ bina.az')
        ]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
        updater.bot.set_my_commands(commands)

        # Add command handlers
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("parse", parse_command))
        dispatcher.add_handler(CommandHandler("t", quick_search))
        dispatcher.add_handler(CommandHandler("b", bina_search))
        dispatcher.add_handler(CommandHandler("turl", change_tap_url))
        dispatcher.add_handler(CommandHandler("burl", change_bina_url))
        dispatcher.add_handler(CommandHandler("auto", auto_check))
        dispatcher.add_handler(CommandHandler("stop", stop_auto_check))
        dispatcher.add_handler(CommandHandler("filter", filter_command))
        dispatcher.add_handler(CommandHandler("cancel", cancel_filter))
        
        # Add callback query handlers
        dispatcher.add_handler(CallbackQueryHandler(menu_callback, pattern='^menu_'))
        dispatcher.add_handler(CallbackQueryHandler(filter_callback, pattern='^filter_'))
        
        # Add message handler for filter text input
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_filter_text))
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
        restore_auto_checks(dispatcher)
        
        # Start the Bot
        updater.start_polling()

        # Run the bot until the user presses Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
        updater.idle()
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 